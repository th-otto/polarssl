@if VERSION >= 6
@os "Linux"
@charset "atari"
@inputenc "atari"
@lang "en"
@endif
@database "POLARSSL"
@options "+g -i -s +z -t2 -d12"
@author "Pierre TONTHAT"
@$VER: 8
@subject "Polarssl.ldg documentation"


@node "Main" "Polarssl.ldg documentation"

      POLARSSL.LDG, port from http://polarssl.org

      @{"What is it?" LINK "polarsslldg_presentation"}

      @{"Install" LINK "polarsslldg_install"}
      @{"History" LINK "polarsslldg_history"}
    
    Functions:
    
      @{"Usage" LINK "polarsslldg_usage"}

      @{"General" LINK "polarsslldg_general_functions"}
      @{"Certificate" LINK "polarsslldg_certificate_functions"}
      @{"Private key" LINK "polarsslldg_key_functions"}
      @{"Entropy" LINK "polarsslldg_entropy_functions"}
      @{"SSL" LINK "polarsslldg_ssl_functions"}
  
@endnode


@node "polarsslldg_presentation" "Polarssl.ldg documentation"
@{U}                                                           Presentation@{0}
   
    Polarssl.ldg provides SSL/TLS layer for clients internet applications.
    
    Used as a library for the LDG system and configured to interact the less
    with disk. The file operations (mostly certificate or key loading) must be
    done by the client application itself. The library is supposed to work only
    with RAM and sockets.
    
    The same LDG works for these TCP layers:
    - MiNTnet
    - MagiCNet (with third party softwares)
    - STinG/STiK
       
@endnode


@node "polarsslldg_install" "Polarssl.ldg documentation"
@{U}                                       Installation and required things@{0}

    @{U}Needs:@{0}

    - uses more or less 1 MB RAM
    - a strong CPU or patience (mostly for SSL Handshake)
    - MiNTNet or STinG/STiK compatible TCP layer
    - MagiC or MiNT is advised (strong usage of Malloc())

    @{U}Update:@{0}

    > Replace old POLARSSL.LDG and POLARSSL.CA by the new ones.

    @{U}Installation:@{0}

    > Install the LDG system:
      - LDG.PRG in your AUTO folder is needed by some programs (GFA coded)
      which detect and use ldg functions via the LDGM cookie.
      - set the LDG folder (usualy C:\GEMSYS\LDG\) by launching LDG.CPX in
      the Control Panel.
    
    > Put POLARSSL.LDG and POLARSSL.CA in the LDG folder.
    
    > Copy or create the POLARSSL.CS folder besides POLARSSL.LDG and 
      copy inside the *.CS (preferred ciphersuites) files.
    
    > No need to restart, the LDG libraries are loaded dynamicaly.
      Some programs need the LDGM cookie, you can launch LDG.PRG after
      boot sequence.
  
@endnode


@node "polarsslldg_usage" "Polarssl.ldg documentation"
@{U}                                                                  Usage@{0}

 0) study polarssl library from https://polarssl.org
    and its example programs
    -> programs\ssl\*.c are very instructive.
     
 1) get structures sizes and malloc them.
    for MiNT Memory protection, do memory allocations with global flag.

    client x509_crt (optional)    
    client pk_context (optional)
    certificates authority chain 
    x509_crt (optional, advised for security verification)
    entropy_context (mandatory)
    ctr_drbg_context (mandatory)
    ssl_context (mandatory)

    if STinG is used, then you must inform the AES global value to the library.
    
    if MiNT is there, then the library uses MiNTnet.
    if MiNT isn't there, then the library uses STinG if its cookie is found.
    
    if your application uses GlueSTiK for the TCP layer and not MiNTnet
    directly, then you have to call force_tcp_layer() for STinG.
    
  2) initialize structures and parse objects with correct order.
    client x509_crt and pk_context (optional)
    
    certificate authority chain x509_crt (optional). 
    The POLARSSL.CA is provided for this. Your application should find it
    with ldg_libpath function, load it into memory and parse it.
    @{B}Attention:@{0} you should do this only under MiNT or MagiC because
    a lot of ldg_Malloc() will be made. Old TOS does not support many calls
    of memory allocations. So disable the certificate check in your
    internet client if you are running under pure TOS.
    It may be possible in the futur (TODO) that the library includes a memory
    manager (MEM.LDG could not be used) that allow certificat check under old
    TOS environment.
    
    entropy and ctr_drbg context. Give your application name. 
    If you use multiple connections, a tip is to add a random number
    or TIMER value converted into string as suffix for the app name.
    
    ssl context:
    - give the socket file descriptor (if MiNTnet), or chanel tcp number
    (if STinG/STiK), you must have opened tcp connection before, as you do it
    for insecure connection.
    - server name is mandatory ("mail.triplea.fr" for example).
    - server certificate verification is optional, if you do not want it
    (to save time and memory), give a NULL pointer to x509 CA cert.
    - for client authentification, give client certificate and the related
    private key, or usualy NULL pointer for both.
    
  3) after ssl context is initialized, you can set preferred protocols.
     this is optional. By defaul, min is SSL 3.0, max is TLS 1.2
     some servers asks very strong cipher suite, ssl handshake can take
     time. You can force max to SSL 3.0 to make it quick or for
     compatibility (some servers are tricky about TLS).
     
     You can also inform the library about your wished ciphersuites. See
     the gmx.h example. Ciphersuite is an array of 32 bits values, each is
     an identifier about a cipher. This array must be terminated with a 
     32 bits NULL. 
     
  4) do the SSL Handshake. If success, you can obtain informations:
     verification results, protocol version, cipher suite.
     you can get the server certificate and show human readable
     informations to the user (for acceptance or reject).
     
  5) if ssl handshake is OK, the you can ssl_read and ssl_write instead
     of read and write in the tcp transferts. Take care of -82 (ssl want read)
     and -84 (ssl want write).
     SSL writes and reads are very quick compared to SSL Handshake.     

  6) when secure connection ends, use ssl_notify_close      
    and free all structures in correct order: first ssl context,then the others.

    if STinG is used, then DO NOT CALL its tcp_close() if the connection was
    encrypted. Leave it as ghost. If called, your application may crash
    (2 or 11 bombs) at some point a bit later. Can't understand why (stack ?).
  
@endnode


@node "polarsslldg_general_functions" "Polarssl.ldg documentation"
@{U}                                                      General functions@{0}

 /*
  * return the version of the PolarSSL library
  */
 const char* get_version();

 /*
  * set AES global value of the caller to the library (since Release 2)
  * you must set it if STinG is used
  */
 void set_aes_global(short *aes_global)
 
 /*
  * choose the TCP layer the library must use (since Release 2)
  * by default, MiNTnet API is used direclty if 'MiNT' cookie is found,
  * or if 'MagX' + 'SCKM' cookies are found.
  * if not then 'STiK' cookie is searched to use STinG/STiK API.
  *
  * you must use this, if you rely entirely on GlueSTiK on MiNT environment
  * and STinG/STiK API.
  *
  * usage is strongly advised to avoid bad autodetection of the TCP layer.
  * call it just before ldg_ssl_init()
  *
  * param: 1 = MiNTnet
  *        2 = STinG/STiK
  *        if other, then MiNTnet is used (with timeout = 0s in SSL handshake).
  */
 void force_tcp_layer(int32 value)
  
@endnode


@node "polarsslldg_certificate_functions" "Polarssl.ldg documentation"
@{U}                                                  Certificate functions@{0}

 /*
  * return the size of x509_crt structure (X509 certificate)
  */
 unsigned long get_sizeof_x509_crt_struct();

 /* 
  * initialize X509_crt structure 
  * 
  * param: pointer of x509_crt
  */
 void ldg_x509_crt_init(x509_crt *crt);

 /* 
  * parse and convert datas located in memory to certificate chain.
  *
  * param: pointer of first x509_crt
  * param: pointer of the datas
  * param: length of the datas
  *
  * return: 0 if all certificates parsed successfully,
  *         or a positive number if partly successful,
  *         or a specific X509 or PEM error code
  */
 int32 ldg_x509_crt_parse(x509_crt *chain, const unsigned char *buf, size_t buflen);

 /* 
  * fill a buffer with human readable informations () of the certificate
  *
  * param: pointer of the buffer
  * param: length of the buffer
  * param: pointer of first x509_crt
  *
  * return: amount of data written to the buffer, or -1 in case of an error.
  */
 int32 ldg_x509_crt_info(char *buf, size_t size, const x509_crt *crt);

 /* 
  * free the contents of a X509_crt structure
  * 
  * param: pointer of first x509_crt
  */
  void ldg_x509_crt_free(x509_crt *crt);
  
@endnode


@node "polarsslldg_key_functions" "Polarssl.ldg documentation"
@{U}                                                  Private Key functions@{0}

 /* 
  * return the size of pk_context structure (private key) 
  */ 
 unsigned long get_sizeof_pk_context_struct();

 /* 
  * initialize pk_context structure
  */
 void ldg_pk_init(pk_context *pk);

 /*
  * parse and convert datas located in memory to pk_context.
  *
  * param: pointer of pk_context
  * param: pointer of the datas
  * param: length of the datas
  *
  * return: 0 if successful, or a specific PK or PEM error code
  */ 
 int32 ldg_pk_parse(pk_context *pk, const unsigned char *key, size_t keylen);

 /*
  * free the contents of a pk_context structure
  *
  * param: pointer of first pk_context
  */ 
 void ldg_pk_free(pk_context *pk);
  
@endnode


@node "polarsslldg_entropy_functions" "Polarssl.ldg documentation"
@{U}                                                      Entropy functions@{0}

 /*
  * return the size of entropy_context structure (entropy) 
  */
 unsigned long get_sizeof_entropy_context_struct();
 
 /*
  * return the size of ctr_drbg_context structure (deterministic random byte generator) 
  */
 unsigned long get_sizeof_ctr_drbg_context_struct();

 /* 
  * initialize pk_context and ctr_drbg_context structures
  *
  * param: pointer of entropy_context
  * param: pointer of ctr_drbg_context
  * param: pointer of C string, name of the internet client or application 
  *
  * return: 0 if successful, or POLARSSL_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED
  */
 int32 ldg_entropy_init(entropy_context *ctx, ctr_drbg_context *ctr, const char *app_name);

 /*
  * free the contents of a entropy_context structure
  *
  * param: pointer of entropy_context 
  * param: pointer of ctr_drbg_context (since Release 2)
  */
 void ldg_entropy_free(entropy_context *ctx, ctr_drbg_context *ctr);
  
@endnode


@node "polarsslldg_ssl_functions" "Polarssl.ldg documentation"
@{U}                                                          SSL functions@{0}

 /*
  * return the size of ssl_context structure (SSL context) 
  */
 unsigned long get_sizeof_ssl_context_struct();

 /*
  * initialize ssl_context structure (client mode only)
  *
  * param: pointer of ssl_context
  * param: pointer of ctr_drbg_context
  * param: opened socket fd, or tcp chanel id
  * param: pointer of C string, name of server 
  * param: pointer of X509_crt chain 
  *        (if NULL, then no server certificate verification)
  * param: pointer of X509_crt of the client 
  *        (usually NULL, if not NULL then client authentification with local certificate)
  * param: pointer of pk_context of the client 
  *        (usually NULL, if not NULL then client authentification with the private key
  *        that goes with the local certificate)
  *
  * return: 0 if successful, or POLARSSL_ERR_SSL_MALLOC_FAILED if memory allocation failed
  */
 int32 ldg_ssl_init(ssl_context *ssl, ctr_drbg_context *ctr, int32 *server_fd, 
                    const char *servername, x509_crt *cacert, 
                    x509_crt *cert, pk_context *pk);

 /*
  * set client ssl protocol preferences, min and max.
  * SSL 3.0 = 0
  * TLS 1.0 = 1
  * TLS 1.1 = 2
  * TLS 1.2 = 3
  * optional, use it after ldg_ssl_init and before ldg_ssl_handshake
  *
  * param: pointer of ssl_context
  * param: number of minimum version
  * param: number of maximum version
  */
 void ldg_ssl_set_minmax_version(ssl_context *ssl, int32 minor_min, int32 minor_max);

 /*
  * inform about the wished ciphersuite (since Release 2).
  * this is useful to discard some buggy or unsupported ciphers for the server.
  *
  * param: pointer of ssl_context
  * param: pointer on a static int32 array, terminated with int32 0
  *        each int32 value is an identifier of the cipher, please see
  *        gmx.h example and the PolarSSL lib sources.
  */
 void ldg_ssl_set_ciphersuite(ssl_context *ssl, const int32 *whised_ciphersuite);

 /*
  * client and server talk about protocol and cipher suite that will be used
  * the function loops until the deal is finished or has failed.
  *
  * param: pointer of ssl_context
  *
  * return: 0 if successful, or a specific SSL error code.
  */
 int32 ldg_ssl_handshake(ssl_context *ssl);

 /*
  * return the version of the ssl protocol employed
  *
  * param: pointer of ssl_context
  *
  * return: pointer of C string ("TLSv1.0" for example)
  */
 const char* ldg_ssl_get_version(ssl_context *ssl);

 /*
  * return the cipher suite employed 
  *
  * param: pointer of ssl_context
  *
  * return: pointer of C string ("TLS_DHE_RSA_WITH_AES_256_CBC_SHA" for example)
  */
 const char* ldg_ssl_get_ciphersuite(ssl_context *ssl);

 /*
  * return bitmask of verification result 
  *
  * param: pointer of ssl_context
  *
  * return 0 if successful or if verification avoided , 
  *        or a combination of:
  *      BADCERT_EXPIRED      0x01
  *      BADCERT_REVOKED      0x02
  *      BADCERT_CN_MISMATCH  0x04
  *      BADCERT_NOT_TRUSTED  0x08
  */ 
 int32 ldg_ssl_get_verify_result(ssl_context *ssl);


 /*
  * return the server certificate
  *
  * param: pointer of ssl_context
  *
  * return: pointer of X509_crt server certificate
  */
 const x509_crt* ldg_ssl_get_peer_cert(ssl_context *ssl);

 /*
  * read datas from the ssl context and put it in the buffer
  * use it instead read mintnet function 
  *
  * param: pointer of ssl_context
  * param: pointer of the datas
  * param: length of the datas
  *
  * return: the number of bytes read, 0 for EOF, or a negative error code.
  */
 int32 ldg_ssl_read( ssl_context *ssl, unsigned char *buf, size_t len);


 /*
  * write datas into the ssl context
  * use it instead write mintnet function 
  *
  * param: pointer of ssl_context
  * param: pointer of the datas
  * param: length of the datas
  *
  * return: number of bytes written, or a negative error code.
  *         if returns POLARSSL_ERR_NET_WANT_WRITE (-84),
  *         it must be called later with the *same* arguments,
  *         until it returns a positive value.
  */
 int32 ldg_ssl_write(ssl_context *ssl, const unsigned char *buf, size_t len);

 /*
  * notify the peer that the connection is being closed
  * use it before free ssl context
  *
  * param: pointer of ssl_context
  */
 int32 ldg_ssl_close_notify(ssl_context *ssl);


 /*
  * free the ssl context  
  *
  * param: pointer of ssl_context
  */
 void ldg_ssl_free(ssl_context *ssl);
  
@endnode

@node "polarsslldg_history" "Polarssl.ldg documentation"
@{U}                                                                History@{0}

  @{B}Release 8:@{0}
  + built on PolarSSL/mbedTLS version 1.3.22
  - chg: removed zlib support (deflate problems, not advised for security). 

  @{B}Release 7:@{0}
  + built on PolarSSL version 1.3.16
    (see fixes in the original library, may fix GMail IMAP certificate
    constant alert)

  @{B}Release 6:@{0}
  + built on PolarSSL version 1.3.15
 
  @{B}Release 5:@{0}
  + built on PolarSSL version 1.3.12
  + add: 'MagX' + 'SCKM' cookies in TCP type auto-detection, 
         if found, MiNTnet API is used.

  @{B}Release 4:@{0}
  + built on PolarSSL version 1.3.10

  @{B}Release 3:@{0}
  + built on PolarSSL version 1.3.9
  - chg: remove built-in ciphersuites for GMX servers (use thndrbrd.cs, TLS 1.0)
  + add: CS Builder in the archives
  + fix: in CS Builder: crash when window arrows are clicked (missing mallocs)

  @{B}Release 2:@{0}
  + built on PolarSSL version 1.3.8
  + fix: SSL handshake problem with GMX servers 
         (automaticaly discard ciphersuites where DHE_RSA are used).
  + add: SSL/TLS support for internet clients softwares using STinG/STiK.
  + new: set_aes_global(), ldg_ssl_set_ciphersuite(), force_tcp_layer() 
  + chg: parameter added in ldg_entropy_free()
  - fix: stack 128K instead of 64K
  
  @{B}Release 1:@{0}
  + built on PolarSSL version 1.3.3
  + add: SSL/TLS support for internet client softwares using MiNTnet.
   
@endnode
